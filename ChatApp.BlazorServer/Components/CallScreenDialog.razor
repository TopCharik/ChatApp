@using Microsoft.AspNetCore.SignalR.Client
@implements IDisposable
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime    

<MudDialog>
    <DialogContent>
        @if (!_isAccepted)
        {
            @if (!IsReceiver)
            {
                <MudText>
                    Waiting for @remoteUsername to accept call...
                </MudText>
            }
        }
        @if (_isAccepted)
        {
            @if (!IsReceiver)
            {
                @_peerJsId
            }
            <div>
                <video id="my_video"></video>
            </div>
            <div>
                <video id="remote_video"></video>
            </div>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="HangUp">Hang up</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateState">Update state</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; }
    
    [Parameter]
    public HubConnection CallsHubConnection { get; set; }
    private List<IDisposable> _hubSubscriptions = new();
    
    
    [Parameter]
    public CallUsernamesDto CallUsernames { get; set; }
    
    [Parameter]
    public bool IsReceiver { get; set; }

    private bool _isAccepted;
    private string _peerJsId;

    private string currentUsername => IsReceiver ? CallUsernames.callReceiverUsername : CallUsernames.callInitiatorUsername;
    private string remoteUsername => IsReceiver ? CallUsernames.callInitiatorUsername : CallUsernames.callReceiverUsername;

    protected override async Task OnInitializedAsync()
    {
        _hubSubscriptions.Add(SubscribeToCallEnd());
        if (IsReceiver)
        {
            _isAccepted = true;
            await JsRuntime.InvokeVoidAsync("newPeer");
            await JsRuntime.InvokeVoidAsync("subscribeToCalls");
            var subscriberPeerId = await JsRuntime.InvokeAsync<string>("getPeerJsId");
            Snackbar.Add($"peerId: {subscriberPeerId}");
            await CallsHubConnection.SendAsync("AcceptCall", CallUsernames, subscriberPeerId);
        }
        if (IsReceiver == false)
        {
            _hubSubscriptions.Add(SubscribeToCallAccept());
        }
    }

    private IDisposable SubscribeToCallEnd()
    {
        return CallsHubConnection.On("CallEnded", async () =>
        {
            Snackbar.Add("CallEnded");
            await JsRuntime.InvokeVoidAsync("endCall");
            MudDialog.Close();
            await InvokeAsync( MudDialog.StateHasChanged);
        });
    }
    
    private IDisposable SubscribeToCallAccept()
    {
        return CallsHubConnection.On("CallAccepted", async (string peerJsId) =>
        {
            _isAccepted = true;
            _peerJsId = peerJsId;
            Snackbar.Add($"peerId: {peerJsId}");
            await JsRuntime.InvokeVoidAsync("newPeer");
            await JsRuntime.InvokeVoidAsync("makePeerjsCall", peerJsId);
            await InvokeAsync( MudDialog.StateHasChanged );
        });
    }
    
    private async Task HangUp()
    {
        await CallsHubConnection.SendAsync("HangUp", CallUsernames);
    }

    private void UpdateState()
    {
        MudDialog.StateHasChanged();
    }
    
    public void Dispose()
    {
        MudDialog.Dispose();
        _hubSubscriptions.ForEach(x => x.Dispose());
    }
}