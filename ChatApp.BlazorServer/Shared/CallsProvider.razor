@using Microsoft.AspNetCore.SignalR.Client
@using ChatApp.BlazorServer.Components
@inject IConfiguration Configuration
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@implements IDisposable


@code {
    [CascadingParameter(Name = "CallsHubConnection")]
    public HubConnection CallsHubConnection { get; set; }

    private string _username;
    private Snackbar snackbar;
    private bool _joined;
    private List<IDisposable> _hubSubscriptions = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        _username = authState.User.Identity.Name;

        await CallsHubConnection.InvokeAsync("Join", _username);


        CallsHubConnection.On("IncomingCall", (CallUsernamesDto callUsernamesDto) =>
        {
            if (callUsernamesDto.callInitiatorUsername != _username)
            {
                snackbar = Snackbar.Add
                    (
                        @<div>
                            <h3>Hi from a RenderFragment</h3>
                            <ul>
                                <MudButton 
                                    Variant="Variant.Filled" Color="Color.Error"
                                    OnClick="() => HangUp(callUsernamesDto)"
                                    >
                                    Decline
                                </MudButton>
                                <MudButton
                                    Variant="Variant.Filled" Color="Color.Success"
                                    OnClick="() => OpenCall(callUsernamesDto)">
                                    Accept
                                </MudButton>
                            </ul>
                        </div>,
                        Severity.Normal,
                        options =>
                        {
                            options.ShowCloseIcon = false;
                            options.CloseAfterNavigation = true;
                            options.VisibleStateDuration = 2000;
                        }
                    );
                
            }
        });
    }

    private void OpenCall(CallUsernamesDto callUsernamesDto)
    {
        var parameters = new DialogParameters
        {
            {"CallsHubConnection", CallsHubConnection},
            {"CallUsernames", callUsernamesDto},
            {"IsReceiver", true},
        };

        var options = new DialogOptions
        {
            CloseButton = false,
            CloseOnEscapeKey = false,
            DisableBackdropClick = true,
        };


        var dialog = DialogService.ShowAsync<CallScreenDialog>("Call Screen Dialog", parameters, options);
    }

    
    private async Task HangUp(CallUsernamesDto callUsernamesDto)
    {
        await CallsHubConnection.InvokeAsync("HangUp", callUsernamesDto);
    }
    
    public void Dispose()
    {
        _hubSubscriptions.ForEach(x => x.Dispose());
        CallsHubConnection.StopAsync();
    }

}