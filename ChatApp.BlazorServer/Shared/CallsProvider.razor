@using Microsoft.AspNetCore.SignalR.Client
@using ChatApp.BlazorServer.Components
@inject IConfiguration Configuration
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject CallStateContainer CallStateContainer
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@implements IDisposable


@code {
    [CascadingParameter(Name = "CallsHubConnection")]
    public HubConnection? CallsHubConnection { get; set; }
    private List<IDisposable> _hubSubscriptions = new();

    private string _username;
    private Snackbar snackbar;
    private bool _joined;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            _username = authState.User.Identity.Name;
        
            await CallsHubConnection.InvokeAsync("Join", _username);
            _hubSubscriptions.Add(SubscribeToIncomingCall());
            _hubSubscriptions.Add(SubscribeToCallEnded());   
        }
    }
    
    private async Task OpenCall(CallUsernamesDto callUsernamesDto)
    {
        var AcceptedCall = new CallState
        {
            CallUsernames = callUsernamesDto,
            IsReceiver = true,
            ReturnUrl = NavigationManager.Uri,
        };
        CallStateContainer.CurrentCall = AcceptedCall;
        NavigationManager.NavigateTo("/call");
    }
    
    private IDisposable SubscribeToCallEnded()
    {
        return CallsHubConnection.On("CallEnded", async () =>
        {
            var uri = NavigationManager.Uri; 
            NavigationManager.NavigateTo($"{uri}#declined");
            NavigationManager.NavigateTo(uri);
        });
    }

    private IDisposable SubscribeToIncomingCall()
    {
        return CallsHubConnection.On("IncomingCall", (CallUsernamesDto callUsernamesDto) =>
        {
            if (callUsernamesDto.callInitiatorUsername != _username)
            {
                snackbar = Snackbar.Add
                    (
                        @<div>
                            <h3>@callUsernamesDto.callInitiatorUsername is calling!!!</h3>
                            <ul>
                                <MudButton
                                    Variant="Variant.Filled" Color="Color.Success"
                                    OnClick="() => OpenCall(callUsernamesDto)">
                                    Accept
                                </MudButton>
                            </ul>
                        </div>,
                        Severity.Normal,
                        options =>
                        {
                            options.ShowCloseIcon = true;
                            options.CloseAfterNavigation = true;
                            options.VisibleStateDuration = 1000;
                            options.HideTransitionDuration = 0;
                            options.VisibleStateDuration = 10000;
                        }
                    );
                
                snackbar.OnClose += snackbar => HangUp(callUsernamesDto);
            }
        });
    }

    
    private async Task HangUp(CallUsernamesDto callUsernamesDto)
    {
        await CallsHubConnection.InvokeAsync("HangUp", callUsernamesDto);
    }
    
    public void Dispose()
    {
        _hubSubscriptions.ForEach(x => x.Dispose());
        InvokeAsync(async () => await CallsHubConnection.StopAsync());
    }
}