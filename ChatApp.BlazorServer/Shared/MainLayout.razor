@using Microsoft.AspNetCore.SignalR.Client
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJwtProvider JwtProvider
@inject IConfiguration Configuration
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CallStateContainer CallStateContainer

<PageTitle>ChatApp.BlazorServer</PageTitle>

<div class="page">
    <MudThemeProvider/>
    <MudDialogProvider/>
    <MudSnackbarProvider/>
    <MudLayout>
        <MudAppBar Elevation="1">
            <AuthorizeView>
                <Authorized>
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
                    <MudSpacer/>
                    @if (!_isInCall)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="OnLogOut">
                            Logout
                        </MudButton>
                    }
                </Authorized>
                <NotAuthorized>
                    <MudButton Variant="Variant.Text" Style="color: #fff" Class="me-3" Href="/">
                        ChatApp
                    </MudButton>
                    <MudSpacer/>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" Class="me-3" OnClick="OnLogin">
                        Login
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OnRegister">Register</MudButton>
                </NotAuthorized>
            </AuthorizeView>
        </MudAppBar>
        <MudDrawer @bind-Open="@_isDrawerOpen" Elevation="1">
            <MudDrawerHeader>
                <MudButton Variant="Variant.Text" Color="Color.Primary" Class="me-3" Href="/">
                    Chat App
                </MudButton>
            </MudDrawerHeader>
            <AuthorizeView>
                <Authorized>
                    <MudNavMenu>
                            <MudNavLink Match="NavLinkMatch.All" Href="users">Users</MudNavLink>
                            <MudNavLink Match="NavLinkMatch.All" Href="chats">Chats</MudNavLink>
                        <MudNavLink Match="NavLinkMatch.All" Href="change-password">Change password</MudNavLink>
                        </MudNavMenu>
                </Authorized>
            </AuthorizeView>
        </MudDrawer>
        <MudMainContent Class="pt-16 px-16">
            <MudContainer MaxWidth="MaxWidth.Large">
                <AuthorizeView>
                    <Authorized>
                        @if (_chatHubConnection?.State == HubConnectionState.Connected
                             && _usersHubConnection?.State == HubConnectionState.Connected
                             && _callsHubConnection?.State == HubConnectionState.Connected)
                        {
                            <CascadingValue Name="ChatHubConnection" Value="@_chatHubConnection">
                                <CascadingValue Name="UsersHubConnection" Value="@_usersHubConnection">
                                    <CascadingValue Name="CallsHubConnection" Value="@_callsHubConnection">
                                        <CallsProvider></CallsProvider>
                                        @Body
                                    </CascadingValue>
                                </CascadingValue>
                            </CascadingValue>   
                        }
                    </Authorized>
                    <NotAuthorized>
                        @Body
                    </NotAuthorized>
                </AuthorizeView>
            </MudContainer>
        </MudMainContent>
    </MudLayout>
</div>

@code{
    private bool _isDrawerOpen = false;
    private HubConnection? _chatHubConnection;
    private HubConnection? _usersHubConnection;
    private HubConnection? _callsHubConnection;
    private string? _currentUsername;
    private bool _isInCall;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            _currentUsername = authState.User.Identity.Name;
            await SetUpHubs(_currentUsername);
            StateHasChanged();
        }
        AuthenticationStateProvider.AuthenticationStateChanged += async state =>
        {
            var authState = await state;
            if (authState.User.Identity is {IsAuthenticated: true } && authState.User.Identity.Name != _currentUsername)
            {
                await SetUpHubs(authState.User.Identity.Name);
            }
        };

        CallStateContainer.OnStateChange += () =>
        {
            _isInCall = CallStateContainer.IsInCall;
            StateHasChanged();
        };
    }

    private async Task SetUpHubs(string username)
    {
        var apiUrl = Configuration["ApiUrl"];
        _chatHubConnection = new HubConnectionBuilder().WithUrl($"{apiUrl}/hub/conversations").Build();
        await _chatHubConnection.StartAsync();
        _usersHubConnection = new HubConnectionBuilder().WithUrl($"{apiUrl}/hub/users").Build();
        await _usersHubConnection.StartAsync();
        _callsHubConnection = new HubConnectionBuilder().WithUrl($"{apiUrl}/hub/calls").Build();
        await _callsHubConnection.StartAsync();
        StateHasChanged();
    }
        
    private void ToggleDrawer()
    {
        _isDrawerOpen = !_isDrawerOpen;
    }

    private void OnLogin()
    {
        NavigationManager.NavigateTo("login");
    }

    private void OnRegister()
    {
        NavigationManager.NavigateTo("register");
    }

    private async Task OnLogOut()
    {
        await JwtProvider.DeleteTokenAsync();
    }

    public void Dispose()
    {
        _chatHubConnection?.DisposeAsync();
        _usersHubConnection?.DisposeAsync();
        CallStateContainer.OnStateChange -= StateHasChanged;
    }

}