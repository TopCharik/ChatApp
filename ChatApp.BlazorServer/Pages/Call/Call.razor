@page "/Call"
@inject CallStateContainer CallStateContainer
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@implements IDisposable

<h3>Call</h3>
@if (CallStateContainer.CurrentCall != null && CallStateContainer.IsInCall && _isAccepted) 
{
    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="HangUp">HangUp</MudButton>   
    <div>
        <MudText>
            @CallStateContainer.currentUsername:
        </MudText>
        <video id="my_video"></video>
    </div>
    <div>
        @CallStateContainer.remoteUsername:
        <video id="remote_video"></video>
    </div>
}

@code {
    [CascadingParameter(Name = "CallsHubConnection")]
    public HubConnection CallsHubConnection { get; set; }
    private string SubscriberPeerId { get; set; }
    private readonly List<IDisposable> _hubSubscriptions = new();
    private bool _isAccepted = false;


    protected override async Task OnInitializedAsync()
    {
        if (!CallStateContainer.IsInCall)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        _hubSubscriptions.Add(SubscribeToCallEnded());

        if (CallStateContainer.CurrentCall is {IsReceiver: true })
        {
            _isAccepted = true;
            SubscriberPeerId = await JsRuntime.InvokeAsync<string>("initPeer");
            Snackbar.Add($"peerJsId: {SubscriberPeerId}");
            await JsRuntime.InvokeVoidAsync("subscribeToCalls");
            await CallsHubConnection.SendAsync("AcceptCall", CallStateContainer.CurrentCall.CallUsernames, SubscriberPeerId);
        }

        if (CallStateContainer.CurrentCall is {IsReceiver: false })
        {
            _hubSubscriptions.Add(SubscribeToCallAccept());
        }
    }

    private async Task HangUp()
    {
        await CallsHubConnection.InvokeAsync("HangUp", CallStateContainer.CurrentCall?.CallUsernames);
    }

    private IDisposable SubscribeToCallEnded()
    {
        return CallsHubConnection.On("CallEnded", async () =>
        {
            NavigationManager.NavigateTo("/");
        });
    }
    
    private IDisposable SubscribeToCallAccept()
    {
        return CallsHubConnection.On("CallAccepted", async (string peerJsId) =>
        {
            _isAccepted = true;
            await JsRuntime.InvokeVoidAsync("newPeer");
            await JsRuntime.InvokeVoidAsync("makePeerjsCall", peerJsId);
        });
    }
    
    public void Dispose()
    {
        InvokeAsync(async () => await CallsHubConnection.InvokeAsync("HangUp", CallStateContainer.CurrentCall?.CallUsernames));
        InvokeAsync(async () => await JsRuntime.InvokeVoidAsync("endCall"));
        _hubSubscriptions.ForEach(x => x.Dispose());
        CallStateContainer.CurrentCall = new CallState();
    }

}