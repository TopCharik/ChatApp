@page "/Users"
@using ChatApp.DTO
@inject IUsersApiProvider UsersApiProvider

<MudTable ServerData="@(new Func<TableState, Task<TableData<AppUserDto>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users</MudText>
        <MudSpacer/>
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="nr_field" T="AppUserDto">Username</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="sign_field" T="AppUserDto">RealName</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="name_field" T="AppUserDto">Email</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="position_field" T="AppUserDto">PhoneNumber</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Username">@context.UserName</MudTd>
        <MudTd DataLabel="Name">@context.RealName</MudTd>
        <MudTd DataLabel="Position">@context.Email</MudTd>
        <MudTd DataLabel="Molar mass">@context.PhoneNumber</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>


@code {
    private List<AppUserDto> pagedData = new();
    private MudTable<AppUserDto> table;
    private PagedResponseDto<AppUserDto>? _data;

    private int totalItems;
    private string searchString = null;
    

    private async Task<TableData<AppUserDto>> ServerReload(TableState state)
    {
        var response = await UsersApiProvider.LoadUsers();

        if (response.IsSuccessStatusCode)
        {
            _data = await response.Content.ReadFromJsonAsync<PagedResponseDto<AppUserDto>>();   
        }
        

        return new TableData<AppUserDto> {TotalItems = _data.TotalCount, Items = _data.Items};
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

}