@page "/Call"
<h3>Call</h3>
@using Microsoft.AspNetCore.SignalR.Client
@implements IDisposable
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        @if (!_isAccepted)
        {
            @if (!IsReceiver)
            {
                <MudText>
                    Waiting for @remoteUsername to accept call...
                </MudText>
            }
        }
        @if (_isAccepted)
        {
            <MudText>Accepted</MudText>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="HangUp">Hang up</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [Parameter]
    public HubConnection CallsHubConnection { get; set; }
    private List<IDisposable> _hubSubscriptions = new();
    
    [Parameter]
    public CallUsernamesDto CallUsernames { get; set; }
    
    [Parameter]
    public bool IsReceiver { get; set; }

    private bool _isAccepted;

    private string _fakePeerJsId;

    private string currentUsername => IsReceiver ? CallUsernames.callReceiverUsername : CallUsernames.callInitiatorUsername;
    private string remoteUsername => IsReceiver ? CallUsernames.callInitiatorUsername : CallUsernames.callReceiverUsername;

    protected override void OnInitialized()
    {
        _hubSubscriptions.Add(SubscribeToCallEnd());
        if (IsReceiver)
        {
            
        }
        if (!IsReceiver)
        {
            
        }
        
        
    }

    private IDisposable SubscribeToCallEnd()
    {
        return CallsHubConnection.On("CallEnded", () =>
        {
            _isAccepted = true;
        });
    }
    
    private async Task HangUp()
    {
        await CallsHubConnection.SendAsync("HangUp",CallUsernames);
    }

    public void Dispose()
    {
        _hubSubscriptions.ForEach(x => x.Dispose());
    }
}