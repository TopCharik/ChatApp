@page "/Users"
@using ChatApp.DTO
@using Microsoft.AspNetCore.WebUtilities
@attribute [Authorize]
@inject IUsersApiProvider UsersApiProvider
@inject NavigationManager NavigationManager

<div>
    <MudTable ServerData="@(new Func<TableState, Task<TableData<AppUserDto>>>(ServerReload))"
              OnRowClick="RowClickEvent"
              T="AppUserDto"
              Dense="true" Hover="true" @ref="_table" CustomHeader="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Users</MudText>
            <MudSpacer/>
            <MudTextField T="string" ValueChanged="@(s => OnSearch("search", s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTHeadRow>
                <MudTh>Avatar</MudTh>
                <MudTh>
                    <MudTableSortLabel SortLabel="username" T="AppUserDto">User Name</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortLabel="realname" T="AppUserDto">First Name</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortLabel="realname" T="AppUserDto">Last Name</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortLabel="email" T="AppUserDto">Email</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortLabel="phone" T="AppUserDto">Phone Number</MudTableSortLabel>
                </MudTh>
            </MudTHeadRow>
            <MudTHeadRow>
                <MudTh></MudTh>
                <MudTh>
                    <MudTextField T="string" ValueChanged="@(s => OnSearch("username", s))" Placeholder="Username" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.FilterAlt" IconSize="Size.Medium" Class="mt-0">
                    </MudTextField>
                </MudTh>
                <MudTh>
                    <MudTextField T="string" ValueChanged="@(s => OnSearch("firstname", s))" Placeholder="First Name" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.FilterAlt" IconSize="Size.Medium" Class="mt-0">
                    </MudTextField>
                </MudTh>
                <MudTh>
                    <MudTextField T="string" ValueChanged="@(s => OnSearch("lastname", s))" Placeholder="Last Name" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.FilterAlt" IconSize="Size.Medium" Class="mt-0">
                    </MudTextField>
                </MudTh>
                <MudTh>
                    <MudTextField T="string" ValueChanged="@(s => OnSearch("email", s))" Placeholder="Email" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.FilterAlt" IconSize="Size.Medium" Class="mt-0">
                    </MudTextField>
                </MudTh>
                <MudTh>
                    <MudTextField T="string" ValueChanged="@(s => OnSearch("phone", s))" Placeholder="Phone" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.FilterAlt" IconSize="Size.Medium" Class="mt-0">
                    </MudTextField>
                </MudTh>
            </MudTHeadRow>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Avatar">
                @if (@context.Avatars.Count > 0)
                {
                    <MudAvatar Color="Color.Secondary">
                        <MudImage Src="@context.Avatars[0].PictureUrl"></MudImage>
                    </MudAvatar>
                }
                else
                {
                    <MudAvatar Color="Color.Primary">@context.UserName.Substring(0, 2).ToUpper()</MudAvatar>
                }
            </MudTd>
            <MudTd DataLabel="Username">@context.UserName</MudTd>
            <MudTd DataLabel="Name">@context.LastName</MudTd>
            <MudTd DataLabel="Name">@context.FirstName</MudTd>
            <MudTd DataLabel="Position">@context.Email</MudTd>
            <MudTd DataLabel="Molar mass">@context.PhoneNumber</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
</div>

@code {
    private List<AppUserDto> pagedData = new();
    private MudTable<AppUserDto> _table;
    private PagedResponseDto<AppUserDto>? _data = new();
    private Dictionary<string, string> _queryParams = new();


    private async Task<TableData<AppUserDto>> ServerReload(TableState state)
    {
        UpdateSortParams(state);
        UpdatePagingParams(state);

        var response = await UsersApiProvider.LoadUsersAsync(_queryParams);

        if (response.IsSuccessStatusCode)
        {
            _data = await response.Content.ReadFromJsonAsync<PagedResponseDto<AppUserDto>>();
        }
        

        return new TableData<AppUserDto> {TotalItems = _data.TotalCount, Items = _data.Items};
    }

    private void RowClickEvent(TableRowClickEventArgs<AppUserDto> tableRowClickEventArgs)
    {
        NavigationManager.NavigateTo($"users/{tableRowClickEventArgs.Item.UserName}");
    }

    private void OnSearch(string field, string value)
    {
        _queryParams["Page"] = "1";

        _queryParams[field] = value;
        if (string.IsNullOrWhiteSpace(value))
        {
            _queryParams.Remove(field);
        }

        _table.ReloadServerData();
    }

    private void UpdateSortParams(TableState state)
    {
        _queryParams["SortField"] = state.SortLabel;
        _queryParams["OrderBy"] =
            state.SortDirection == SortDirection.Ascending
                ? "asc"
                : "desc";

        if (state.SortDirection == SortDirection.None)
        {
            _queryParams.Remove("SortField");
            _queryParams.Remove("OrderBy");
        }
    }

    private void UpdatePagingParams(TableState state)
    {
        _queryParams["PageSize"] = state.PageSize.ToString();
        _queryParams["Page"] = (state.Page + 1).ToString();
        if (_queryParams["PageSize"] == "10")
        {
            _queryParams.Remove("PageSize");
        }
        if (_queryParams["Page"] == "1")
        {
            _queryParams.Remove("Page");
        }
    }

}