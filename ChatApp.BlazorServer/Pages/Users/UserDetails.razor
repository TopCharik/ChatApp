@page "/users/{username}"
@using ChatApp.BlazorServer.Components
@attribute [Authorize] 
@inject IUsersApiProvider UsersApiProvider
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@if (_appUserDto != null)
{
    <MudGrid Class="mt-5">
        <MudItem lg="4">
            <MudButton OnClick="@(() => AvatarDetails())">
                <MudAvatar
                    style="height: 300px; width: 300px" Color="Color.Secondary">
                    @if (_appUserDto.Avatars.Count > 0)
                    {
                        <MudImage Src="@_appUserDto.Avatars[0].ImagePayload"></MudImage>
                    }
                    else
                    {
                        @_appUserDto.UserName.ToUpper()
                    }
                </MudAvatar>
            </MudButton>
        </MudItem>
        <MudItem lg="8" class="mt-5">
            <MudGrid>
                @if (_canEdit)
                {
                    <MudItem lg="12">
                        <MudButton OnClick="@((e) => ChangeUsername())" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit">
                            Change username
                        </MudButton>
                    </MudItem>
                }
                <MudItem lg="12">
                    <h1>Username: @_appUserDto.UserName</h1>
                </MudItem>
                @if (_canEdit)
                {
                    <MudItem lg="12">
                        <MudButton OnClick="@((e) => EditUser())" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit">
                            Edit User Information
                        </MudButton>
                    </MudItem>
                }
                <MudItem lg="12">
                    <MudList>
                        @if (_appUserDto.FirstName != null)
                        {
                            <MudListItem Avatar="@Icons.Material.Filled.PermIdentity">
                                First Name: @_appUserDto.FirstName
                            </MudListItem>
                        }
                        @if (_appUserDto.LastName != null)
                        {
                            <MudListItem Avatar="@Icons.Material.Filled.PermIdentity">
                                Last Name: @_appUserDto.LastName
                            </MudListItem>
                        }
                        <MudListItem Avatar="@Icons.Material.Filled.AlternateEmail">
                            Email: @_appUserDto.Email
                        </MudListItem>
                        @if (_appUserDto.PhoneNumber != null)
                        {
                            <MudListItem Avatar="@Icons.Material.Filled.Phone">
                                Phone Number: @_appUserDto.PhoneNumber
                            </MudListItem>
                        }
                    </MudList>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
}


@code {

    [Parameter]
    public string? Username { get; set; }

    private AppUserDto? _appUserDto;
    private ApiError? _apiError;
    private bool _canEdit;

    protected override async Task OnInitializedAsync()
    {
        await LoadUser(Username);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _canEdit = _appUserDto?.UserName == authState.User.Identity?.Name;
    }

    public async Task EditUser()
    {
        var parameters = new DialogParameters {["AppUserDto"] = _appUserDto};
        var options = new DialogOptions {DisableBackdropClick = true};
        var dialog = await DialogService.ShowAsync<EditUserDialog>("", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadUser(Username);
        }
    }

    private async Task ChangeUsername()
    {
        var parameters = new DialogParameters {["AppUserDto"] = _appUserDto};
        var options = new DialogOptions {DisableBackdropClick = true};
        var dialog = await DialogService.ShowAsync<ChangeUsername>("", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newUsername = result.Data.ToString();
            NavigationManager.NavigateTo($"/users/{newUsername}");
            await LoadUser(newUsername);
        }
    }

    private async Task AvatarDetails()
    {
        var parameters = new DialogParameters
        {
            ["AppUserDto"] = _appUserDto,
            ["CanEdit"] = _canEdit,
        };
        var options = new DialogOptions {DisableBackdropClick = true};
        var dialog = await DialogService.ShowAsync<AvatarDetailsDialog>("", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadUser(Username);
        }
    }

    private async Task LoadUser(string username)
    {
        var response = await UsersApiProvider.LoadSingleUserAsync(username);

        if (response.IsSuccessStatusCode)
        {
            _appUserDto = await response.Content.ReadFromJsonAsync<AppUserDto>();
        }
        if (!response.IsSuccessStatusCode)
        {
            _apiError = await response.Content.ReadFromJsonAsync<ApiError>();
        }
    }

}