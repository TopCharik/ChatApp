@using FluentValidation
@using ChatApp.DTO.Validators
@using ChatApp.BlazorServer.Helpers
@inject IJwtStorage JwtStorage
@inject IUsersApiProvider UsersApiProvider 
@inject IValidator<NewUsernameDto> NewUsernameValidator 
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (_newUsernameValidator != null)
{
    <MudCard Style="width: 500px">
        <MudCardHeader>
            <h2>
                Change Username
            </h2>
        </MudCardHeader>
        <MudCardContent>
            <MudForm Model="@_newUsernameDto" @ref="@_form" Validation="@(_newUsernameValidator.ValidateValue)" ValidationDelay="0">
                <MudTextField Label="Old username" Class="mt-3"
                              @bind-Value="AppUserDto.UserName"
                              ReadOnly="true"/>
                <MudTextField @bind-Value="_newUsernameDto.NewUsername"
                              For="@(() => _newUsernameDto.NewUsername)"
                              Immediate="true"
                              Label="New Username"/>
            </MudForm>
            @if (_apiError != null)
            {
                @foreach (var errorMessage in _apiError.Errors)
                {
                    <MudText Color="Color.Error">
                        @errorMessage.Value
                    </MudText>
                }
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton
                Disabled="@(_form is null or {IsValid: false})"
                Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
                OnClick="@(async () => await OnSubmitEdit())">
                Change Username
            </MudButton>
        </MudCardActions>
    </MudCard>
}

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public AppUserDto AppUserDto { get; set; } = new();

    private NewUsernameDto _newUsernameDto = new();
    private ApiError? _apiError;
    private MudForm _form;
    private MudBlazorFormValidator<NewUsernameDto>? _newUsernameValidator;

    protected override void OnInitialized()
    {
        _newUsernameValidator = new MudBlazorFormValidator<NewUsernameDto>(NewUsernameValidator);
    }

    private async Task OnSubmitEdit()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            return;
        }

        var response = await UsersApiProvider.ChangeUsernameAsync(AppUserDto.UserName, _newUsernameDto);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            await JwtStorage.SaveJwtTokenAsync(token);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            MudDialog.Close(DialogResult.Ok(_newUsernameDto.NewUsername));
        }
        if (!response.IsSuccessStatusCode)
        {
            _apiError = await response.Content.ReadFromJsonAsync<ApiError>();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

}