@using AutoMapper
@using ChatApp.BlazorServer.Helpers
@using FluentValidation
@inject IMapper Mapper
@inject IUsersApiProvider UsersApiProvider 
@inject IValidator<EditUserDto> EditUserValidator 

@if (_editUserValidator != null)
{
    <MudCard Style="width: 500px">
        <MudCardHeader>
            <h2>
                Change Username
            </h2>
        </MudCardHeader>
        <MudCardContent>
            <MudForm Model="@_editUserDto" @ref="@_form"
                     Validation="@(_editUserValidator.ValidateValue)" ValidationDelay="0">
                <MudTextField Label="Old username" Class="mt-3"
                              @bind-Value="AppUserDto.UserName"
                              ReadOnly="true"/>
                <MudTextField @bind-Value="_editUserDto.FirstName"
                              For="@(() => _editUserDto.FirstName)"
                              Immediate="true"
                              Label="New First Name"/>
                <MudTextField @bind-Value="_editUserDto.LastName"
                              For="@(() => _editUserDto.LastName)"
                              Immediate="true"
                              Label="New Last Name"/>
                <MudTextField @bind-Value="_editUserDto.Email"
                              For="@(() => _editUserDto.Email)"
                              Immediate="true"
                              Label="New Email"/>
                <MudDatePicker MinDate="DateTime.Now.AddYears(-200)"
                               @bind-Date="_editUserDto.Birthday"  
                               For="@(() => _editUserDto.Birthday)" 
                               Label="Birthday" />
                <MudTextField @bind-Value="_editUserDto.PhoneNumber"
                              For="@(() => _editUserDto.PhoneNumber)"
                              Immediate="true"
                              Label="New Phone Number"/>
            </MudForm>
            @if (_apiError != null)
            {
                @foreach (var errorMessage in _apiError.Errors)
                {
                    <MudText Color="Color.Error">
                        @errorMessage.Value
                    </MudText>
                }
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton
                Disabled="@(_form is null or {IsValid: false})"
                Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
                OnClick="@(async () => await OnSubmitEdit())">
                Change Username
            </MudButton>
        </MudCardActions>
    </MudCard>
}


@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public AppUserDto AppUserDto { get; set; } = new();

    private EditUserDto _editUserDto;
    private ApiError? _apiError;
    private MudForm _form;
    private MudBlazorFormValidator<EditUserDto>? _editUserValidator;

    protected override void OnInitialized()
    {
        _editUserDto = Mapper.Map<EditUserDto>(AppUserDto);
        _editUserValidator = new MudBlazorFormValidator<EditUserDto>(EditUserValidator);
    }

    private async Task OnSubmitEdit()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            return;
        }

        var response = await UsersApiProvider.UpdateUserAsync(_editUserDto, AppUserDto.UserName);
        if (response.IsSuccessStatusCode)
        {
            var updatedUser = await response.Content.ReadFromJsonAsync<AppUserDto>();
            MudDialog.Close(DialogResult.Ok(updatedUser));
        }
        if (!response.IsSuccessStatusCode)
        {
            _apiError = await response.Content.ReadFromJsonAsync<ApiError>();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

}