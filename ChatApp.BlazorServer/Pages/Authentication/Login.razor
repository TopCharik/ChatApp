@page "/Login"
@using ChatApp.DTO
@inject IAuthenticationApiProvider AuthenticationApiProvider
@inject IJwtStorage JwtStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<h3>Login</h3>
<EditForm Model="@_loginDto" OnValidSubmit="OnLogin" Style="width: 100%">
    <DataAnnotationsValidator/>
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Username"
                          @bind-Value="_loginDto.UserName" For="@(() => _loginDto.UserName)"/>
            <MudTextField Label="Password" Class="mt-3"
                          @bind-Value="_loginDto.Password" For="@(() => _loginDto.Password)" InputType="InputType.Password"/>
            @if (_apiError != null)
            {
                @foreach (var errorMessage in _apiError.Errors)
                {
                    <MudText Color="Color.Error" Class="mt-5">@errorMessage.Value</MudText>   
                }
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>


@code {
    private LoginDto _loginDto = new();
    private ApiError? _apiError;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task OnLogin()
    {
        var response = await AuthenticationApiProvider.Login(_loginDto);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            await JwtStorage.SaveJwtTokenAsync(token);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
        }
        if (!response.IsSuccessStatusCode)
        {
            _apiError = await response.Content.ReadFromJsonAsync<ApiError>();
            _loginDto.Password = string.Empty;
        }
    }

}