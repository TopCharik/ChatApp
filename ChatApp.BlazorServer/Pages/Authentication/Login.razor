@page "/Login"
@using ChatApp.DTO.Validators
@using FluentValidation
@using ChatApp.BlazorServer.Helpers
@inject IAuthenticationApiProvider AuthenticationApiProvider
@inject IJwtStorage JwtStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IValidator<LoginDto> LoginValidator



@if (_loginDtoValidator != null)
{
    <MudCard Class="mt-5">
        <MudCardHeader>
            <h2>
                Login
            </h2>
        </MudCardHeader>
        <MudCardContent>
            <MudForm Model="@_loginDto" @ref="@_form" Validation="@(_loginDtoValidator.ValidateValue)" ValidationDelay="0">
                <MudTextField @bind-Value="_loginDto.UserName"
                              For="@(() => _loginDto.UserName)"
                              Immediate="true"
                              Label="Username"/>

                <MudTextField @bind-Value="_loginDto.Password"
                              For="@(() => _loginDto.Password)"
                              InputType="InputType.Password"
                              Immediate="true"
                              Label="Password"/>
            </MudForm>
            @if (_apiError != null)
            {
                @foreach (var errorMessage in _apiError.Errors)
                {
                    <MudText Color="Color.Error">
                        @errorMessage.Value
                    </MudText>
                }
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton
                Disabled="@(_form is null or {IsValid: false})"
                Variant="Variant.Filled" Color="Color.Primary" Class="mt-5"
                OnClick="@(async () => await OnLogin())">
                Login
            </MudButton>
        </MudCardActions>
    </MudCard>
}

@code {
    private LoginDto _loginDto = new();
    private ApiError? _apiError;
    private MudForm _form;
    private MudBlazorFormValidator<LoginDto>? _loginDtoValidator;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            NavigationManager.NavigateTo("/");
        }
        _loginDtoValidator = new MudBlazorFormValidator<LoginDto>(LoginValidator);
    }

    private async Task OnLogin()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            return;
        }

        var response = await AuthenticationApiProvider.Login(_loginDto);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            await JwtStorage.SaveJwtTokenAsync(token);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
        }
        if (!response.IsSuccessStatusCode)
        {
            _apiError = await response.Content.ReadFromJsonAsync<ApiError>();
        }
    }

}