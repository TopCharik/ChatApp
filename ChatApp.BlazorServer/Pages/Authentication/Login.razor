@page "/Login"
@inject IAuthenticationApiProvider AuthenticationApiProvider
@inject IJwtPersistService JwtPersistService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Login</h3>

<EditForm
    Model="@_loginDto"
    OnValidSubmit="@OnLogin">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        <label for="user-name">User name</label>
        <InputText class="form-control" id="user-name" @bind-Value="@_loginDto.UserName"/>
    </div>


    <div class="form-group">
        <label for="password">Password</label>
        <InputText type="password" class="form-control" id="password" @bind-Value="@_loginDto.Password"/>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Login</button>
    
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <p class="text-danger">
            @_errorMessage
        </p>
    }
    
</EditForm>


@code {
    private LoginDto _loginDto = new();
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task OnLogin()
    {
        var response = await AuthenticationApiProvider.Login(_loginDto);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            await JwtPersistService.SetJwtTokenAsync(token);
            NavigationManager.NavigateTo("/");
        }
        if (response.StatusCode == HttpStatusCode.Unauthorized)
        {
            _errorMessage = await response.Content.ReadAsStringAsync();
            _loginDto.Password = string.Empty;
        }
    }
}