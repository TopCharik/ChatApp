@page "/Change-Password"
@using System.ComponentModel.DataAnnotations
@using ChatApp.DTO.Validators
@using FluentValidation
@using Severity = MudBlazor.Severity
@attribute [Authorize]
@inject ISnackbar Snackbar
@inject IJwtProvider JwtProvider
@inject IValidator<ChangePasswordDto> ChangePasswordValidator
@inject IAuthenticationApiProvider AuthenticationApiProvider

@*
<h3>Change Password</h3>

<EditForm Model="@_changePasswordDto" OnValidSubmit="OnChangePassword" Style="width: 100%">
    <DataAnnotationsValidator/>
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Old Password" InputType="InputType.Password"
                          @bind-Value="_changePasswordDto.OldPassword" For="@(() => _changePasswordDto.OldPassword)"/>
            <MudTextField Label="New Password" InputType="InputType.Password"
                          @bind-Value="_changePasswordDto.NewPassword" For="@(() => _changePasswordDto.NewPassword)"/>
            <MudTextField Label="Confirm Password" InputType="InputType.Password"
                          @bind-Value="_changePasswordDto.ConfirmPassword" For="@(() => _changePasswordDto.ConfirmPassword)"/>
            @if (_apiError != null)
            {
                @foreach (var errorMessage in _apiError.Errors)
                {
                    <MudText Color="Color.Error" Class="mt-5">@errorMessage.Value</MudText>
                }
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton
                ButtonType="ButtonType.Submit"
                Variant="Variant.Filled"
                Color="Color.Primary"
                Class="ml-auto">
                Change Password
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>
*@

@if (_changePasswordValidator != null)
{
    <MudCard Class="mt-5">
        <MudCardHeader>
            <h2>
                Register
            </h2>
        </MudCardHeader>
        <MudCardContent>
            <MudForm Model="@_changePasswordModel" @ref="@_form"
                     Validation="@(_changePasswordValidator.ValidateValue)" ValidationDelay="0">
                <MudTextField @bind-Value="_changePasswordModel.OldPassword"
                              For="@(() => _changePasswordModel.OldPassword)"
                              Immediate="true"
                              InputType="InputType.Password"
                              Label="Old Password"/>
                <MudTextField @bind-Value="_changePasswordModel.NewPassword"
                              For="@(() => _changePasswordModel.NewPassword)"
                              Immediate="true"
                              InputType="InputType.Password"
                              Label="New Password"/>
                <MudTextField @bind-Value="_changePasswordModel.ConfirmPassword"
                              For="@(() => _changePasswordModel.ConfirmPassword)"
                              Immediate="true"
                              InputType="InputType.Password"
                              Label="Confirm Password"/>
            </MudForm>
            @if (_apiError != null)
            {
                @foreach (var errorMessage in _apiError.Errors)
                {
                    <MudText Color="Color.Error">
                        @errorMessage.Value
                    </MudText>
                }
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton
                Disabled="@(_form is null or {IsValid: false})"
                Variant="Variant.Filled" Color="Color.Primary" Class="mt-5"
                OnClick="@(async () => await OnChangePassword())">
                Change password
            </MudButton>
        </MudCardActions>
    </MudCard>
}


@code {
    private ChangePasswordModel _changePasswordModel = new();
    private ApiError? _apiError;
    private MudForm _form;
    private MudBlazorFormValidator<ChangePasswordModel>? _changePasswordValidator;
    private bool _isSuccess;

    protected override void OnInitialized()
    {
        _changePasswordValidator = new MudBlazorFormValidator<ChangePasswordModel>(ChangePasswordValidator);
    }

    private async Task OnChangePassword()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            return;
        }

        var response = await AuthenticationApiProvider.ChangePassword(_changePasswordModel);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            await JwtProvider.SetTokenAsync(token);
            _changePasswordModel = new();
            _apiError = null;
            Snackbar.Add("Password has been changed successfully", Severity.Success);
        }
        if (!response.IsSuccessStatusCode)
        {
            _apiError = await response.Content.ReadFromJsonAsync<ApiError>();
        }
    }


    private class ChangePasswordModel : ChangePasswordDto
    {
        [Compare("NewPassword", ErrorMessage = "'Confirm Password' and 'New Password' do not match.")]
        [Required(ErrorMessage = "Password is required")]
        public string ConfirmPassword { get; set; }
    }

}