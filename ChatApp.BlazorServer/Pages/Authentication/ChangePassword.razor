@page "/Change-Password"
@using ChatApp.DTO
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]
@inject IJwtProvider JwtProvider
@inject IAuthenticationApiProvider AuthenticationApiProvider

<h3>Change Password</h3>

<EditForm Model="@_changePasswordDto" OnValidSubmit="OnChangePassword" Style="width: 100%">
    <DataAnnotationsValidator/>
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Old Password" InputType="InputType.Password"
                          @bind-Value="_changePasswordDto.OldPassword" For="@(() => _changePasswordDto.OldPassword)"/>
            <MudTextField Label="New Password" InputType="InputType.Password"
                          @bind-Value="_changePasswordDto.NewPassword" For="@(() => _changePasswordDto.NewPassword)"/>
            <MudTextField Label="Confirm Password" InputType="InputType.Password"
                          @bind-Value="_changePasswordDto.ConfirmPassword" For="@(() => _changePasswordDto.ConfirmPassword)"/>
            @if (_apiError != null)
            {
                @foreach (var errorMessage in _apiError.Errors)
                {
                    <MudText Color="Color.Error" Class="mt-5">@errorMessage.Value</MudText>
                }
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton
                ButtonType="ButtonType.Submit"
                Variant="Variant.Filled"
                Color="Color.Primary"
                Class="ml-auto">
                Change Password
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@if (_isSuccess)
{
    <h3 class="text-success">
        Password changed successfully.
    </h3>
}


@code {
    private ChangePasswordModel _changePasswordDto = new();
    private ApiError? _apiError;
    private bool _isSuccess;

    private async Task OnChangePassword()
    {
        var response = await AuthenticationApiProvider.ChangePassword(_changePasswordDto);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            await JwtProvider.SetTokenAsync(token);
            _changePasswordDto = new();
            _apiError = null;
            _isSuccess = true;
        }
        if (!response.IsSuccessStatusCode)
        {
            _apiError = await response.Content.ReadFromJsonAsync<ApiError>();
        }
    }


    private class ChangePasswordModel : ChangePasswordDto
    {
        [Compare("NewPassword", ErrorMessage = "'Confirm Password' and 'New Password' do not match.")]
        [Required(ErrorMessage = "Password is required")]
        public string ConfirmPassword { get; set; }
    }

}