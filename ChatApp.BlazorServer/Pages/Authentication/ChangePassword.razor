@page "/Change-Password"
@using ChatApp.DTO
@attribute [Authorize]
@inject IJwtProvider JwtProvider
@inject IAuthenticationApiProvider AuthenticationApiProvider

<h3>Change Password</h3>

@*<EditForm
    Model="@_changePasswordDto"
    @onclick="() => _isSuccess = false"
    OnValidSubmit="@OnChangePassword">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group mt-3">
        <label for="old-password">Old password:</label>
        <InputText type="password" class="form-control" id="old-password" @bind-Value="@_changePasswordDto.OldPassword"/>
    </div>


    <div class="form-group mt-3">
        <label for="new-password">New password:</label>
        <InputText type="password" class="form-control" id="new-password" @bind-Value="@_changePasswordDto.NewPassword"/>
    </div>

    @if (_identityErrors != null)
    {
        <ul class="text-danger mt-5">
            @foreach (var error in _identityErrors)
            {
                <li>
                    @error.Description
                </li>
            }
        </ul>
    }

    <button type="submit" class="btn btn-primary mt-3">Change Password</button>

</EditForm>*@

<EditForm Model="@_changePasswordDto" OnValidSubmit="OnChangePassword" Style="width: 100%">
    <DataAnnotationsValidator/>
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Old Password" InputType="InputType.Password"
                          @bind-Value="_changePasswordDto.OldPassword" For="@(() => _changePasswordDto.OldPassword)"/>
            <MudTextField Label="New Password" InputType="InputType.Password"
                          @bind-Value="_changePasswordDto.NewPassword" For="@(() => _changePasswordDto.NewPassword)"/>
            @if (_identityErrors.Count > 0)
            {
                <MudPaper Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.subtitle2"></MudText>
                    @foreach (var error in _identityErrors)
                    {
                        <MudText Color="@Color.Error">@error.Description</MudText>
                    }
                </MudPaper>
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton
                ButtonType="ButtonType.Submit"
                Variant="Variant.Filled"
                Color="Color.Primary"
                Class="ml-auto">
                Change Password
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@if (_isSuccess)
{
    <h3 class="text-success">
        Password changed successfully.
    </h3>
}


@code {
    private ChangePasswordDto _changePasswordDto = new();
    private List<IdentityError> _identityErrors = new();
    private bool _isSuccess;

    private async Task OnChangePassword()
    {
        var response = await AuthenticationApiProvider.ChangePassword(_changePasswordDto);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            await JwtProvider.SetTokenAsync(token);
            _changePasswordDto = new();
            _identityErrors = new();
            _isSuccess = true;
        }
        if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            _identityErrors = await response.Content.ReadFromJsonAsync<List<IdentityError>>();
        }
    }

}