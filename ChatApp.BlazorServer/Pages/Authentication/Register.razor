@page "/Register"
@using ChatApp.DTO
@inject IAuthenticationApiProvider AuthenticationApiProvider
@inject IJwtProvider JwtProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h3>Register</h3>


<EditForm Model="@_dto" OnValidSubmit="OnRegister" Style="width: 100%">
    <DataAnnotationsValidator/>
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Username"
                          @bind-Value="_dto.UserName" For="@(() => _dto.UserName)"/>
            <MudTextField Label="Email" Class="mt-3"
                          @bind-Value="_dto.Email" For="@(() => _dto.Email)"/>
            <MudTextField Label="First name" Class="mt-3"
                          @bind-Value="_dto.FirstName" For="@(() => _dto.FirstName)"/>
            <MudTextField Label="Last name" Class="mt-3"
                                      @bind-Value="_dto.LastName" For="@(() => _dto.LastName)"/>
            <MudTextField Label="Password" Class="mt-3"
                          @bind-Value="_dto.Password" For="@(() => _dto.Password)" InputType="InputType.Password"/>
            @if (_apiError != null)
            {
                @foreach (var errorMessage in _apiError.Errors)
                {
                    <MudText Color="Color.Error" Class="mt-5">@errorMessage.Value</MudText>   
                }
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton
                ButtonType="ButtonType.Submit"
                Variant="Variant.Filled"
                Color="Color.Primary"
                Class="ml-auto">
                Register
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>


@code {
    private RegisterAppUserDto _dto = new();
    private ApiError? _apiError;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task OnRegister()
    {
        var response = await AuthenticationApiProvider.Register(_dto);

        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            await JwtProvider.SetTokenAsync(token);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
        }
        if (!response.IsSuccessStatusCode)
        {
            _apiError = await response.Content.ReadFromJsonAsync<ApiError>();
        }
    }

}