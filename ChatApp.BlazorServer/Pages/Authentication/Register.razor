@page "/Register"
@using ChatApp.DTO
@inject IAuthenticationApiProvider AuthenticationApiProvider
@inject IJwtProvider JwtProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h3>Register</h3>


<EditForm Model="@_registerDto" OnValidSubmit="OnRegister" Style="width: 100%">
    <DataAnnotationsValidator/>
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Username"
                          @bind-Value="_registerDto.UserName" For="@(() => _registerDto.UserName)"/>
            <MudTextField Label="Email" Class="mt-3"
                          @bind-Value="_registerDto.Email" For="@(() => _registerDto.Email)"/>
            <MudTextField Label="Real name" Class="mt-3"
                          @bind-Value="_registerDto.RealName" For="@(() => _registerDto.RealName)"/>
            <MudTextField Label="Password" Class="mt-3"
                          @bind-Value="_registerDto.Password" For="@(() => _registerDto.Password)" InputType="InputType.Password"/>
            @if (_identityErrors.Count > 0)
            {
                <MudPaper Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.subtitle2"></MudText>
                    @foreach (var error in _identityErrors)
                    {
                        <MudText Color="@Color.Error">@error.Description</MudText>
                    }
                </MudPaper>   
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton
                ButtonType="ButtonType.Submit"
                Variant="Variant.Filled"
                Color="Color.Primary"
                Class="ml-auto"
                OnClick="OnRegister">
                Register
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>


@code {
    private UserRegisterDto _registerDto = new();
    private List<IdentityError> _identityErrors = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task OnRegister()
    {
        var response = await AuthenticationApiProvider.Register(_registerDto);

        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            await JwtProvider.SetTokenAsync(token);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
        }
        if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            _identityErrors = await response.Content.ReadFromJsonAsync<List<IdentityError>>();
        }
    }

}