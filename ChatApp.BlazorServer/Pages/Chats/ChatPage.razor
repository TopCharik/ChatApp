@page "/Chats/{ChatLink}"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Data.SqlTypes
@using ChatApp.BlazorServer.Components
@using ChatApp.BlazorServer.Helpers
@using ChatApp.DTO.Validators
@using FluentValidation
@inject IParticipationApiProvider ParticipationApiProvider
@inject IMessagesApiProvider MessagesApiProvider
@inject IDialogService DialogService
@inject IJSRuntime JsRuntime
@inject IConfiguration Configuration
@inject IValidator<NewMessageDto> NewMessageValidator
@implements IDisposable;

@if (_conversationParticipationDto is {ChatInfo: not null })
{
    <div class="d-flex flex-grow-1 flex-row">
        <MudPaper Elevation="25" Class="py-4 flex-grow-1">
            <MudToolBar Dense="true" Class="d-flex flex-row">
                <MudButton OnClick="@(() => AvatarDetails())">
                    @if (_conversationParticipationDto.ChatInfo.Avatars is {Count: > 0 })
                    {
                        <MudAvatar Color="Color.Secondary">
                            <MudImage Src="@_conversationParticipationDto.ChatInfo.Avatars[0].ImagePayload"></MudImage>
                        </MudAvatar>
                    }
                    else
                    {
                        <MudAvatar Color="Color.Primary">@_conversationParticipationDto.ChatInfo?.Title.Substring(0, 2).ToUpper()</MudAvatar>
                    }
                </MudButton>
                <MudText Typo="Typo.h6" Class="ms-5">@_conversationParticipationDto.ChatInfo.Title</MudText>
                <MudSpacer/>
                <div>
                    @if (_conversationParticipationDto?.Participation is {HasLeft: false })
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="OnLeaveChat">Leave Chat</MudButton>
                    }
                    @if (_conversationParticipationDto?.Participation == null
                         || _conversationParticipationDto?.Participation.HasLeft == true)
                    {
                        @if (_conversationParticipationDto.ChatInfo.IsPrivate)
                        {
                            <MudText>This is a private chat, you can't join it.</MudText>
                        }
                        @if (!_conversationParticipationDto.ChatInfo.IsPrivate)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnJoinChat">Join Chat</MudButton>
                        }
                    }
                </div>
            </MudToolBar>
            <div>
                <div class="d-flex flex-column px-4 mt-5" style="max-height:65vh;min-height:65vh; overflow:scroll;" id="chatContainer">
                    @if (_messages != null)
                    {
                        foreach (var message in _messages)
                        {
                            <div class="d-flex flex-row my-4"
                                 Style="">
                                <div class="mr-4">
                                    @if (message.Participation.AppUser?.Avatars is {Count: > 0 })
                                    {
                                        <MudAvatar Color="@Color.Secondary">
                                            <MudImage Src="@message.Participation.AppUser?.Avatars[0].ImagePayload"></MudImage>
                                        </MudAvatar>
                                    }
                                    else
                                    {
                                        <MudAvatar Color="@Color.Secondary">
                                            @message.Participation.AppUser.UserName.Substring(0, 2).ToUpper()
                                        </MudAvatar>
                                    }
                                </div>
                                <div Style="overflow-wrap: anywhere;padding: 5px 40px 0 20px; background-color: rgba(13,202,240,0.34); border-radius: 5px">
                                    <MudText Color="Color.Secondary" Typo="@Typo.body1" Style="font-weight: 500">
                                        From: @message.Participation.AppUser.UserName
                                    </MudText>
                                    <MudText Color="Color.Primary" Typo="@Typo.caption" Style="font-size: xx-small!important;">
                                        @message.DateSent.ToString("yyyy-MM-dd; HH:mm:ss;")
                                    </MudText>
                                    <MudText Typo="@Typo.body2" Style="padding: 20px 20px 5px 5px;">
                                        @message.MessageText
                                    </MudText>
                                </div>

                            </div>
                        }
                    }
                </div>
            </div>
            @if (_conversationParticipationDto?.Participation is {HasLeft: false } && _newMessageValidator != null)
            {
                <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="width: 100%;" >
                        <MudCardContent Style="min-width: 85%">
                            <MudForm Model="@_newMessageDto" @ref="@_form" Validation="@(_newMessageValidator.ValidateValue)" ValidationDelay="0">
                                <MudTextField
                                    @bind-Value="_newMessageDto.MessageText"
                                    For="@(() => _newMessageDto.MessageText)"
                                    Immediate="true"
                                    Label="New Username"/>
                            </MudForm>
                            @if (_messageError != null)
                            {
                                @foreach (var errorMessage in _messageError.Errors)
                                {
                                    <MudText Color="Color.Error">
                                        @errorMessage.Value
                                    </MudText>
                                }
                            }
                        </MudCardContent>
                    <MudCardActions >
                        <MudButton
                            Style="min-width: 15%"
                            Disabled="@(_form is null or {IsValid: false})"
                            OnClick="OnSendMessage"
                            StartIcon="@Icons.Material.Outlined.Send" Color="Color.Secondary">
                            Send
                        </MudButton>
                    </MudCardActions>
                </MudPaper>
            }
        </MudPaper>
    </div>
}

@if (_chatErrors != null)
{
    foreach (var kvp in _chatErrors.Errors)
    {
        <MudText Color="Color.Error">@kvp.Key: @kvp.Value</MudText>
    }
}

@code {

    [Parameter]
    public string? ChatLink { get; set; }

    [CascadingParameter(Name = "ChatHubConnection")]
    public HubConnection? ChatHubConnection { get; set; }

    private ConversationParticipationDto? _conversationParticipationDto;
    private List<MessageDto>? _messages;
    private NewMessageDto _newMessageDto = new();
    private ApiError? _messageError;
    private ApiError? _chatErrors;
    private List<IDisposable> _hubSubscriptions = new();
    private MudForm _form;
    private MudBlazorFormValidator<NewMessageDto>? _newMessageValidator;


    protected override async Task OnInitializedAsync()
    {
        await UpdateChatParticipationAsync();
        await UpdateMessagesAsync();
        _newMessageValidator = new MudBlazorFormValidator<NewMessageDto>(NewMessageValidator);

        if (ChatHubConnection == null)
        {
            var apiUrl = Configuration["ApiUrl"];
            ChatHubConnection = new HubConnectionBuilder().WithUrl($"{apiUrl}/hub/calls").Build();
        }
        
        if (ChatHubConnection.State == HubConnectionState.Disconnected)
        {
            await ChatHubConnection.StartAsync();
        }

        if (_conversationParticipationDto != null)
        {
            _hubSubscriptions.Add
                (
                    ChatHubConnection.On($"{_conversationParticipationDto.Id.ToString()}/NewMessage", async () =>
                    {
                        var date = _messages.Count == 0
                            ? SqlDateTime.MinValue.Value
                            : _messages[^1].DateSent;

                        await LoadMessagesAfterAsync(date);
                    })
                );

            _hubSubscriptions.Add
                (
                    ChatHubConnection.On($"{_conversationParticipationDto.Id.ToString()}/ConversationInfoChanged", async () =>
                    {
                        await UpdateChatParticipationAsync();
                    })
                );
        }
    }

    private async Task OnJoinChat()
    {
        var response = await ParticipationApiProvider.JoinChat(ChatLink);

        if (response.IsSuccessStatusCode)
        {
            await UpdateChatParticipationAsync();
        }
        if (!response.IsSuccessStatusCode)
        {
            _chatErrors = await response.Content.ReadFromJsonAsync<ApiError>();
        }
    }

    private async Task OnLeaveChat()
    {
        var response = await ParticipationApiProvider.LeaveChat(ChatLink);

        if (response.IsSuccessStatusCode)
        {
            await UpdateChatParticipationAsync();
            await UpdateMessagesAsync();
        }
        if (!response.IsSuccessStatusCode)
        {
            _chatErrors = await response.Content.ReadFromJsonAsync<ApiError>();
        }
    }

    private async Task UpdateChatParticipationAsync()
    {
        var response = await ParticipationApiProvider.GetChatParticipation(ChatLink);
        if (response.IsSuccessStatusCode)
        {
            _conversationParticipationDto = await response.Content.ReadFromJsonAsync<ConversationParticipationDto>();
        }
        if (!response.IsSuccessStatusCode)
        {
            _chatErrors = await response.Content.ReadFromJsonAsync<ApiError>();
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateMessagesAsync()
    {
        if (_conversationParticipationDto == null) return;

        var response = await MessagesApiProvider.LoadMessagesAsync(_conversationParticipationDto.Id);

        if (response.IsSuccessStatusCode)
        {
            _messages = await response.Content.ReadFromJsonAsync<List<MessageDto>>();
            await JsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
        }
        if (!response.IsSuccessStatusCode)
        {
            _messageError = await response.Content.ReadFromJsonAsync<ApiError>();
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadMessagesAfterAsync(DateTime after)
    {
        if (_conversationParticipationDto == null) return;

        var response = await MessagesApiProvider.LoadMessagesAfterAsync(_conversationParticipationDto.Id, after);

        if (response.IsSuccessStatusCode)
        {
            var newMessages = await response.Content.ReadFromJsonAsync<List<MessageDto>>();
            _messages.AddRange(newMessages);
            await InvokeAsync(StateHasChanged);
            await JsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
        }
        if (!response.IsSuccessStatusCode)
        {
            _messageError = await response.Content.ReadFromJsonAsync<ApiError>();
        }
    }

    private async Task OnSendMessage()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            return;
        }

        if (_conversationParticipationDto == null) return;

        var result = await MessagesApiProvider.SendMessageAsync(_conversationParticipationDto.Id, _newMessageDto);

        if (result.IsSuccessStatusCode)
        {
            _newMessageDto = new NewMessageDto();
        }
        else
        {
            _chatErrors = await result.Content.ReadFromJsonAsync<ApiError>();
        }
    }

    private async Task AvatarDetails()
    {
        var parameters = new DialogParameters
        {
            ["ChatInfoDto"] = _conversationParticipationDto.ChatInfo,
            ["CanEdit"] = _conversationParticipationDto?.Participation?.CanChangeChatAvatar ?? false,
        };
        var options = new DialogOptions {DisableBackdropClick = true};
        var dialog = await DialogService.ShowAsync<AvatarDetailsDialog>("", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await UpdateChatParticipationAsync();
        }
    }

    public void Dispose()
    {
        _hubSubscriptions.ForEach(x => x.Dispose());
    }

}