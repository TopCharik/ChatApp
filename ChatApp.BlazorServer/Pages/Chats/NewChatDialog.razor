@using FluentValidation
@using ChatApp.DTO.Validators
@using ChatApp.BlazorServer.Helpers
@inject IChatsApiProvider ChatsApiProvider
@inject IUsersApiProvider UsersApiProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IValidator<NewChatDto> NewChatValidator

@if (_newChatValidator != null)
{
    <MudCard Style="width: 500px">
        <MudCardHeader>
            <h2>
                Create New Chat
            </h2>
        </MudCardHeader>
        <MudCardContent>
            <MudForm Model="@_newChatDto" @ref="@_form" Validation="@(_newChatValidator.ValidateValue)" ValidationDelay="0">
                <MudTextField @bind-Value="_newChatDto.Title"
                              For="@(() => _newChatDto.Title)"
                              Immediate="true"
                              Label="Title"/>
                <MudTextField @bind-Value="_newChatDto.ChatLink"
                              For="@(() => _newChatDto.ChatLink)"
                              Immediate="true"
                              Label="Title"/>
                <MudSwitch Label="Is private chat" Class="mt-3"
                           @bind-Checked="_newChatDto.IsPrivate" For="@(() => _newChatDto.IsPrivate)"/>
                @if (_apiError != null)
                {
                    @foreach (var errorMessage in _apiError.Errors)
                    {
                        <MudText Color="Color.Error" Class="mt-5">@errorMessage.Value</MudText>
                    }
                }
                <MudText Class="mt-3">Added Users:</MudText>
                <MudChipSet>
                    <MudChip Color="Color.Primary" Text="@_currentUsername"></MudChip>
                    @foreach (var username in _selectedUsernames)
                    {
                        <MudChip OnClose="DeselectUsername" Text="@username"></MudChip>
                    }
                </MudChipSet>
                <MudExpansionPanel Text="Users">
                    <MudTextField T="string"
                                  @bind-Value="_searchString"
                                  DebounceInterval="500"
                                  OnDebounceIntervalElapsed="LoadUsers"
                                  Placeholder="Username"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.FilterAlt" IconSize="Size.Medium" Class="mt-0">
                    </MudTextField>
                    <MudList Clickable="true">
                        @foreach (var user in _searchUsers.Take(5))
                        {
                            <MudListItem OnClick="() => AddUser(user)">
                                <MudHighlighter
                                    Text="@($"{user.UserName} | {user.FirstName} {user.LastName} | {user.Email} | {user.PhoneNumber};")"
                                    HighlightedText="@_searchString"/>
                            </MudListItem>
                        }
                    </MudList>
                </MudExpansionPanel>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton
                Disabled="@(_form is null or {IsValid: false})"
                Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
                OnClick="@(async () => await OnSubmitEdit())">
                Create new chat
            </MudButton>
        </MudCardActions>
    </MudCard>
}

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private NewChatDto _newChatDto = new();
    private List<string> _selectedUsernames = new();
    private string _searchString = string.Empty;
    private List<AppUserDto> _searchUsers = new();
    private ApiError? _apiError;
    private string _currentUsername = string.Empty;
    private MudForm _form;
    private MudBlazorFormValidator<NewChatDto>? _newChatValidator;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _currentUsername = authState.User.Identity?.Name;
        _newChatValidator = new MudBlazorFormValidator<NewChatDto>(NewChatValidator);
    }

    private async Task OnSubmitEdit()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            return;
        }
        
        _newChatDto.Usernames = _selectedUsernames;
        var response = await ChatsApiProvider.CreateNewChatAsync(_newChatDto);
        if (response.IsSuccessStatusCode)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
        if (!response.IsSuccessStatusCode)
        {
            _apiError = await response.Content.ReadFromJsonAsync<ApiError>();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }


    private async Task LoadUsers()
    {
        _searchUsers.Clear();
        var page = 0;
        var searchParams = new Dictionary<string, string>();
        searchParams["search"] = _searchString;

        while (true)
        {
            searchParams["page"] = page.ToString();
            searchParams["pageSize"] = "100";
            var response = await UsersApiProvider.LoadUsersAsync(searchParams);

            if (response.IsSuccessStatusCode)
            {
                var pagedList = await response.Content.ReadFromJsonAsync<PagedResponseDto<AppUserDto>>();
                _searchUsers.AddRange(pagedList.Items.Where(x => !_selectedUsernames.Contains(x.UserName)
                                                                 && x.UserName != _currentUsername));

                if (_searchUsers.Count > 5 || !pagedList.HasNext) break;
            }
            page++;
        }
    }

    private async Task AddUser(AppUserDto username)
    {
        _selectedUsernames.Add(username.UserName);
        await LoadUsers();
    }

    private async Task DeselectUsername(MudChip mudChip)
    {
        _selectedUsernames.Remove(mudChip.Text);
        await LoadUsers();
    }

}