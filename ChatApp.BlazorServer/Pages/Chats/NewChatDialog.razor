@inject IChatsApiProvider ChatsApiProvider
@inject IUsersApiProvider UsersApiProvider

<MudDialog Style="width: 500px">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3"/>
            Create new chat: @_newChatDto.ChatLink
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@_newChatDto" OnValidSubmit="OnSubmitEdit" Style="width: 100%">
            <DataAnnotationsValidator/>
            <MudCardContent>
                <MudTextField Label="Chat title"
                              @bind-Value="_newChatDto.Title" For="@(() => _newChatDto.Title)"/>
                <MudTextField Label="Chat link" Class="mt-3"
                              @bind-Value="_newChatDto.ChatLink" For="@(() => _newChatDto.ChatLink)"/>
                <MudTextField Label="Chat avatar url" Class="mt-3"
                              @bind-Value="_newChatDto.AvatarUrl" For="@(() => _newChatDto.AvatarUrl)"/>
                <MudSwitch Label="Is private chat" Class="mt-3"
                           @bind-Checked="_newChatDto.IsPrivate" For="@(() => _newChatDto.IsPrivate)"/>
                @if (_apiError != null)
                {
                    @foreach (var errorMessage in _apiError.Errors)
                    {
                        <MudText Color="Color.Error" Class="mt-5">@errorMessage.Value</MudText>
                    }
                }
                <MudChipSet AllClosable="true" OnClose="DeselectUsername">
                    @foreach (var username in _selectedUsernames)
                    {
                        <MudChip Text="@username"></MudChip>
                    }
                </MudChipSet>
                <MudExpansionPanel Text="Users">
                    <MudTextField T="string"
                                  @bind-Value="_searchString"
                                  DebounceInterval="500"
                                  OnDebounceIntervalElapsed="LoadUsers"
                                  Placeholder="Username"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.FilterAlt" IconSize="Size.Medium" Class="mt-0">
                    </MudTextField>
                    <MudList Clickable="true">
                        @foreach (var user in _searchUsers.Take(5))
                        {
                            <MudListItem OnClick="() => AddUser(user)">
                                @user.UserName | @user.FirstName @user.LastName | @user.Email | @user.PhoneNumber;
                            </MudListItem>
                        }
                    </MudList>
                </MudExpansionPanel>
            </MudCardContent>
            <MudCardActions>
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <MudButton
                    ButtonType="ButtonType.Submit"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    Class="ml-auto">
                    Create chat
                </MudButton>
            </MudCardActions>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private NewChatDto _newChatDto = new();
    private List<string> _selectedUsernames = new();
    private string _searchString = string.Empty;
    private List<AppUserDto> _searchUsers = new();
    private ApiError? _apiError;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task OnSubmitEdit()
    {
        _newChatDto.Usernames = _selectedUsernames;
        var response = await ChatsApiProvider.CreateNewChatAsync(_newChatDto);
        if (response.IsSuccessStatusCode)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
        if (!response.IsSuccessStatusCode)
        {
            _apiError = await response.Content.ReadFromJsonAsync<ApiError>();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }


    private async Task LoadUsers()
    {
        _searchUsers.Clear();
        var page = 0;
        var searchParams = new Dictionary<string, string>();
        searchParams["search"] = _searchString;

        while (true)
        {
            searchParams["page"] = page.ToString();
            var response = await UsersApiProvider.LoadUsersAsync(searchParams);
            
            if (response.IsSuccessStatusCode)
            {
                var pagedList = await response.Content.ReadFromJsonAsync<PagedResponseDto<AppUserDto>>();
                _searchUsers.AddRange(pagedList.Items.Where(x => !_selectedUsernames.Contains(x.UserName)));

                if (_searchUsers.Count > 5 || !pagedList.HasNext) break;
            }
            page++;
        }
    }

    private async Task AddUser(AppUserDto username)
    {
        _selectedUsernames.Add(username.UserName);
        await LoadUsers();
    }

    private async Task DeselectUsername(MudChip mudChip)
    {
        _selectedUsernames.Remove(mudChip.Text);
        await LoadUsers();
    }

}