@page "/Foo"
@using ChatApp.Core.Entities.FooAggregate
@using ChatApp.API.DTOs
@inject IFooService FooService

<PageTitle>Example CRUD</PageTitle>

<h1>Example CRUD</h1>

<p>This component demonstrates CRUD with application service layer.</p>



<EditForm 
    Model="@_fooDto"
    OnValidSubmit="@AddItem"
    >
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <InputText id="textMessage" @bind-Value="_fooDto.Message"></InputText>
    
    <button type="submit">Add Item</button>

</EditForm>


@if (_foos == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Message</th>
            <th>Remove</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var foo in _foos)
        {
            <tr>
                <td>@foo.Id.ToString()</td>
                <td>@foo.TextMessage</td>
                <td>
                    <button @onclick="() => RemoveItem(foo.Id)">Delete item</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Foo>? _foos;
    private FooDto _fooDto = new();


    protected override async Task OnInitializedAsync()
    {
        _foos = await FooService.GetAsync();
    }

    private async Task AddItem()
    {
        var foo = new Foo
        {
            TextMessage = _fooDto.Message,
        };

        _foos = await FooService.AddAsync(foo);
        _fooDto.Message = "";
    }

    private async Task RemoveItem(int id)
    {
        var itemToDelete = await FooService.GetByIdAsync(id);
        if (itemToDelete == null)
        {
            return;
        }
        
        _foos = await FooService.DeleteAsync(itemToDelete);
    }
}